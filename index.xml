<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Masayuki Takagi&#39;s Blog</title>
    <link>http://takagi.github.io/</link>
    <description>Recent content on Masayuki Takagi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Mar 2015 10:06:09 +0900</lastBuildDate>
    <atom:link href="http://takagi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to set up a Hugo blog on GitHub Pages</title>
      <link>http://takagi.github.io/2015/03/02/how-to-set-up/</link>
      <pubDate>Mon, 02 Mar 2015 10:06:09 +0900</pubDate>
      
      <guid>http://takagi.github.io/2015/03/02/how-to-set-up/</guid>
      <description>

&lt;p&gt;This post describes how to set up a blog with Hugo and to host it on GitHub Pages.&lt;/p&gt;

&lt;h2 id=&#34;hugo-on-github-pages:af3cead2406fc32e31f056f34083f33a&#34;&gt;Hugo on GitHub Pages&lt;/h2&gt;

&lt;p&gt;Hugo is a fast and modern static website engine. With Hugo, a new idea around making website creation becomes simple. GitHub Pages is website hosting directly from GitHub repositories. Just edit, push and changes are live.&lt;/p&gt;

&lt;p&gt;Following shows how to set up a blog with Hugo and to host it on GitHub Pages.&lt;/p&gt;

&lt;h2 id=&#34;making-two-repositories:af3cead2406fc32e31f056f34083f33a&#34;&gt;Making two repositories&lt;/h2&gt;

&lt;p&gt;First, make two repositories. One is for Hugo contents and the other is for blog hosted on GitHub Pages. Here I make these repositories for the following names and descriptions on my GitHub account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blog-hugo: Hugo contents for my blog.&lt;/li&gt;
&lt;li&gt;takagi.github.io: For my blog hosted on GitHub Pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The name &lt;code&gt;takagi.github.io&lt;/code&gt; is on GitHub Pages naming rule.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-a-blog-with-hugo:af3cead2406fc32e31f056f34083f33a&#34;&gt;Setting up a blog with Hugo&lt;/h2&gt;

&lt;p&gt;Second, create a new site for my blog with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site ~/Desktop/blog
$ cd ~/Desktop/blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After creating it, edit its configuration file &lt;code&gt;config.toml&lt;/code&gt;. Change the blog&amp;rsquo;s base url and title, add its author.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://takagi.github.io/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;Masayuki Takagi&#39;s Blog&amp;quot;
[params]
  author = &amp;quot;Masayuki Takagi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download a themes in its &lt;code&gt;theme&lt;/code&gt; directory. I choose liquorice theme. With the theme, I apply some CSS modification for my preference.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/eliasson/liquorice ~/themes/liquorice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For generating the site&amp;rsquo;s static HTML files, at least one content page is required. So create a content page with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new file is now created in &lt;code&gt;content/&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-03-02T09:25:07+09:00&amp;quot;
draft = true
title = &amp;quot;about&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Place some content in Markdown format below the &lt;code&gt;+++&lt;/code&gt; in this file. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A headline

Some Content
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapping-the-github-pages-repository:af3cead2406fc32e31f056f34083f33a&#34;&gt;Mapping the GitHub Pages repository&lt;/h2&gt;

&lt;p&gt;For deploying the static HTML files that will be generated in &lt;code&gt;public&lt;/code&gt; on &lt;code&gt;takagi.github.io&lt;/code&gt; repository, map the repository to &lt;code&gt;public&lt;/code&gt; as a git sub module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
$ git submodule add git@github.com:takagi/takagi.github.io.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generating-to-deploy:af3cead2406fc32e31f056f34083f33a&#34;&gt;Generating to deploy&lt;/h2&gt;

&lt;p&gt;With the following shell script, generate and deploy the blog on GitHub Pages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo --theme=liquorice

# Go To Public folder
cd public

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date +\&amp;quot;%Y-%m-%dT%H:%M:%S %Z\&amp;quot;`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;see-also:af3cead2406fc32e31f056f34083f33a&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages - Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PIC: A native compiler for 8-bit PIC micro controllers</title>
      <link>http://takagi.github.io/2015/03/01/pic/</link>
      <pubDate>Sun, 01 Mar 2015 15:48:15 +0900</pubDate>
      
      <guid>http://takagi.github.io/2015/03/01/pic/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/takagi/pic&#34;&gt;PIC&lt;/a&gt; is a native compiler for 8-bit PIC micro controllers written in Common Lisp. The host language is a pretty small subset of ML-like language and the target language is 8-bit PIC micro controller assembly. Common Lisp is the compiler language.&lt;/p&gt;

&lt;h2 id=&#34;usage:113ac366824a31a54089fe54144b2e89&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Following is an example of LED blinking with PIC12F683 micro controller. &lt;code&gt;init&lt;/code&gt; function is one of the compiler&amp;rsquo;s special functions, where the micro controller&amp;rsquo;s SFR(Special Function Registers) are initialized. Following &lt;code&gt;main&lt;/code&gt; function is also the compiler&amp;rsquo;s special function and program&amp;rsquo;s main routine is executed here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mdelay1&lt;/code&gt; function and &lt;code&gt;mdelay&lt;/code&gt; macro are for delaying. Note that since 8-bit PIC handles only 8-bit unsigned integers, nested loops are needed for delaying more than 255 msec (950 msec here). &lt;code&gt;progn&lt;/code&gt; and &lt;code&gt;loop&lt;/code&gt; are predefined macros for the compiler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defpic init ()
  (progn
    (setreg :gpio #x0)                  ; clear GP0-5
    (setreg :cmcon0 #x07)               ; disable comparator
    (setbank1)                          ; switch to bank 1
    (setreg :trisio #x08)               ; only GP3 is outputinputmode
    (setreg :ansel #x00)                ; disable analog IO
    (setreg :ioc #x00)                  ; disable interruption
    (setbank0)                          ; switch to bank 0
    (setreg :intcon #x00)))             ; disable interruption

(defpic main ()
  (progn
    (setreg :gpio #x20)                 ; set GP5 to high
    (mdelay 50)                         ; delay for 50 msec
    (setreg :gpio #x00)                 ; set GP5 to low
    (mdelay 950)                        ; delay for 950 msec
    (main)))                            ; repeat

(defpic mdelay1 ()
  (loop 90                              ; 90 is a magic number to delay
    0))                                 ;  for 1 msec

(defpicmacro mdelay (n)
  (unless (&amp;lt;= 0 n 65535)
    (error &amp;quot;The value ~S is invalid.&amp;quot; n))
  (multiple-value-bind (q r) (truncate n 256)
    (if (= q 0)
        `(loop ,r (mdelay1))
        `(loop ,q (loop ,r (mdelay1))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;code&gt;pic-compile&lt;/code&gt; function compiles and outputs the complete assembly for the PIC functions to standard output. The output assembly is expected to be assembled with Microchip&amp;rsquo;s MPASM assembler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PIC&amp;gt; (pic-compile)
    INCLUDE&amp;quot;p12f683.inc&amp;quot;
    list p=12f683

    __CONFIG _CP_OFF &amp;amp; _CPD_OFF &amp;amp; _WDT_OFF &amp;amp; _BOD_ON &amp;amp; _IESO_OFF&amp;amp; _PWRTE_ON &amp;amp; _INTOSCIO &amp;amp; _MCLRE_OFF

    CBLOCK  020h
    L0,L1,L2,L3,L4,L5,L6,L7 ; local registers
    I0,I1,I2,I3,I4,I5,I6,I7 ; input registers
    SP,STMP,STK             ; stack registers
    ENDC

    ORG 0
    GOTO    MAIN
    ...
    END
; No value
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;github-repository:113ac366824a31a54089fe54144b2e89&#34;&gt;GitHub repository&lt;/h2&gt;

&lt;p&gt;The GitHub repository is &lt;a href=&#34;https://github.com/takagi/pic&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swank RPC プロトコル</title>
      <link>http://takagi.github.io/2014/12/01/swank/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>http://takagi.github.io/2014/12/01/swank/</guid>
      <description>

&lt;p&gt;Swank RPC プロトコルは、SLIME と Swank との間で用いられる、テキストベースの非同期通信プロトコルです。SLIME は、Common Lisp でアプリケーションを開発するための Emacs モードで、IDE（統合開発環境）と呼べるほど強力な機能を備えています。SLIME には、Swank と呼ばれるバックエンドがあります。Swank は、Common Lisp プロセスにロードされ、ソケットを経由して SLIME と通信します。このとき使用されるのが、Swank RPC プロトコルです。&lt;/p&gt;

&lt;p&gt;このエントリでは、Swank RPC プロトコルについて簡単に説明します。&lt;/p&gt;

&lt;h2 id=&#34;swank-rpc-プロトコルの概観:74eb3724ebc339776f23f7f3bbd76a2d&#34;&gt;Swank RPC プロトコルの概観&lt;/h2&gt;

&lt;p&gt;Swank RPC プロトコルは、6文字の16進数文字列とそれに続くS式、終端の改行文字で構成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000016(:return (:ok nil) 1)\n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先頭の16進数文字列は、続くS式の長さ（最後の改行文字を含む）を表します。S式は、SLIME や Swank によって読み込まれます。S式の最初の要素はメッセージの種類を表すキーワードで、残りの要素がその引数です。&lt;/p&gt;

&lt;p&gt;メッセージには、以下のような種類があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:emacs-rex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:indentation-update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:new-features&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swank-rpc-プロトコルによるs式の評価:74eb3724ebc339776f23f7f3bbd76a2d&#34;&gt;Swank RPC プロトコルによるS式の評価&lt;/h2&gt;

&lt;p&gt;たとえば、(+ 3 4)というS式を Swank で評価するには、以下のメッセージを送信します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00002c(:emacs-rex (+ 3 4) &amp;quot;COMMON-LISP-USER&amp;quot; t 1)\n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初の6文字は続くS式の長さで、改行文字を含め44文字のため、16進数で2cとなります。&lt;/p&gt;

&lt;p&gt;メッセージの種類は &lt;code&gt;:emacs-rex&lt;/code&gt;（Remote EXecute SEXP）で、第一引数が評価するS式、第二引数がそのときのカレントパッケージです。第三引数はS式の評価を行う Swank 側のスレッドを表し、第四引数は戻り値を受け取る継続を意味します。&lt;/p&gt;

&lt;p&gt;S式が評価されると、Swank からは以下のようなメッセージが返信されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000013(:return (:ok 7) 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初の6文字は、送信されたメッセージと同様にS式の長さを表し、19文字のため、16進数で13となります。&lt;/p&gt;

&lt;p&gt;戻り値を表すメッセージは、&lt;code&gt;:return&lt;/code&gt;です。評価に成功した場合、第一引数の最初の要素が&lt;code&gt;:ok&lt;/code&gt;となり、二番目の要素に評価した結果の値が入ります。ここではその値は7です。第二引数は、送信されたメッセージの第四引数に含まれていた継続がそのまま返されます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:74eb3724ebc339776f23f7f3bbd76a2d&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このように、Swank RPC プロトコルでは、S式で表現されたテキストベースのメッセージが相互にやりとりされます。SLIME と Swank のやり取りの様子は、Emacs の &lt;em&gt;slime-events&lt;/em&gt; バッファでみることができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cl-coroutine: a coroutine library for Common Lisp</title>
      <link>http://takagi.github.io/2014/05/30/cl-coroutine/</link>
      <pubDate>Fri, 30 May 2014 00:00:00 +0900</pubDate>
      
      <guid>http://takagi.github.io/2014/05/30/cl-coroutine/</guid>
      <description>

&lt;p&gt;CL-COROUTINE is a coroutine library for Common Lisp. It uses CL-CONT continuations library in its implementation. Here I show an example to use it. For detail, please see the project repository below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/takagi/cl-coroutine&#34;&gt;cl-coroutine: a coroutine library for Common Lisp&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example:a4fad3ea3f2fb087b411806e2a4fd3c8&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here shows an example how to use cl-coroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;; define a coroutine using DEFCOROUTINE macro 
(defcoroutine example (whom) 
  (format t &amp;quot;First greeting to: ~A~%&amp;quot; whom) 
  (yield 1) 
  (format t &amp;quot;Second greeting to: ~A~%&amp;quot; whom) 
  (yield 2) 
  (format t &amp;quot;Third greeting to: ~A~%&amp;quot; whom) 
  (coexit 3) 
  (format t &amp;quot;No greeting to: ~A~%&amp;quot; whom) 
  (yield 4)) 
=&amp;gt; EXAMPLE 

;; make a coroutine object 
(setf coroutine (make-coroutine &#39;example)) 
=&amp;gt; a coroutine object 

;; funcall it 
(funcall coroutine &amp;quot;Smith&amp;quot;) 
&amp;gt;&amp;gt; First greeting to: Smith 
=&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I want your feedbacks. Thanks.&lt;/p&gt;

&lt;h2 id=&#34;project-repository:a4fad3ea3f2fb087b411806e2a4fd3c8&#34;&gt;Project repository&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/takagi/cl-coroutine&#34;&gt;cl-coroutine: a coroutine library for Common Lisp&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SBCL (Steel Bank Common Lisp) のビルドプロセス</title>
      <link>http://takagi.github.io/2014/05/30/sbcl-build-process/</link>
      <pubDate>Fri, 30 May 2014 00:00:00 +0900</pubDate>
      
      <guid>http://takagi.github.io/2014/05/30/sbcl-build-process/</guid>
      <description>

&lt;p&gt;Common Lisp の実装の１つである SBCL (Steel Bank Common Lisp) のビルドプロセスは、Allegro Common Lisp や LispWorks といった、イメージベースでそれ自身の上でのみビルド可能な Common Lisp 実装とは異なり、SBCL 以外の Common Lisp 実装の上でもビルドできます。それを実現するために、SBCL のビルドプロセスでは、様々なテクニックが使われています。&lt;/p&gt;

&lt;p&gt;このエントリでは、SBCL のビルドプロセスを順を追って説明します。&lt;/p&gt;

&lt;h2 id=&#34;host-1-ビルドステージ:eed224310d4514a746715be452bdfbd0&#34;&gt;host-1 ビルドステージ&lt;/h2&gt;

&lt;p&gt;まず、ホスト上にクロスコンパイラを読み込みます。SBCL のソースコードをホストコンパイラでコンパイルしロードすることで、ホスト上にクロスコンパイラを展開します。&lt;/p&gt;

&lt;p&gt;続いて、後のステージのための前処理として、sb!fasl:genesis の読み込みと、C ヘッダファイルの出力を行います。sb!fasl:genesis は、genesis-2 ビルドステージで、&amp;rsquo;cold core&amp;rsquo; を生成するために使われます。C ヘッダファイルは、続く target-1 ビルドステージで、SBCL の実行形式を構築するのに使われます。&lt;/p&gt;

&lt;h2 id=&#34;target-1-ビルドステージ:eed224310d4514a746715be452bdfbd0&#34;&gt;target-1 ビルドステージ&lt;/h2&gt;

&lt;p&gt;target-1 ビルドステージでは、大きく２つの処理が行われます。１つは、SBCL 実行形式の構築です。host-1 ビルドステージで生成された C ヘッダファイルと、その他の C ソースファイルおよびアセンブリファイルから、SBCL の実行形式を構築します。ただし、この実行形式は、この時点ではまだ動作しません。OS サービスへのインターフェイスやガベージコレクタを提供するものの、次ステージ以降で生成されるターゲットメモリイメージを含まないためです。&lt;/p&gt;

&lt;p&gt;もう１つの処理は、ターゲットの一部として使用される Lisp ソースコードの生成です。この Lisp ソースコードは、小さな C プログラムをコンパイルおよび実行することで生成され、システム依存の定数と型に関する情報を提供します。&lt;/p&gt;

&lt;h2 id=&#34;host-2-ビルドステージ:eed224310d4514a746715be452bdfbd0&#34;&gt;host-2 ビルドステージ&lt;/h2&gt;

&lt;p&gt;このステージでは、SBCL 用のオブジェクトファイル (FASL ファイル) が生成されます。オブジェクトファイルは、クロスコンパイラ版の compile-file を用いて、SBCL ソースコードを再度コンパイルすることで得られます。このとき、SBCL ソースコードの他に、host-1 ビルドステージで生成した Lisp ソースコードを併せて用いることで、クロスコンパイラ上の定数定義を、システム環境に応じたものに更新します。&lt;/p&gt;

&lt;h2 id=&#34;genesis-2-ビルドステージ:eed224310d4514a746715be452bdfbd0&#34;&gt;genesis-2 ビルドステージ&lt;/h2&gt;

&lt;p&gt;続いて、genesis-2 ビルドステージに入ります。ここでは、host-1 で読み込んだ sb!vm:genesis を用いて、FASL ファイルのロードとメモリイメージの保存をシミュレートします。sb!vm:genesis が必要となる理由は、ホストコンパイラの load 関数では、SBCL の FASL 形式をロードできず、また、SBCL のターゲットイメージがまだ存在しないことからその load 関数を使うこともできないためです。&lt;/p&gt;

&lt;p&gt;ここで行う処理は、次のように進みます。まず、特定の順序で擬似的に FASL ファイルをロードし、メモリイメージを展開します。次に、ターゲットのメモリ領域をバイト配列とみなし、FASL ファイルをロードしたときに起こるであろう処理をシミュレートします。この方法で実行できない処理は、ターゲットイメージの初期化関数が実行されるまで遅延されます。すべての FASL ファイルがこの方法で処理された後、メモリ領域を SBCL 実行形式が期待する形式でファイルに保存します。これで &amp;lsquo;cold core&amp;rsquo; が生成されました。&lt;/p&gt;

&lt;p&gt;最後に、&amp;rsquo;cold core&amp;rsquo; をメモリイメージとして、SBCL 実行形式を起動します (&amp;lsquo;cold init&amp;rsquo;)。遅延されていたトップレベル・フォームの処理などは、このタイミングで実行されます。&amp;rsquo;cold init&amp;rsquo;は、助けになる Lisp デバッガが存在しないことから最もデバッグしづらいため、現在の SBCL のビルドプロセスにおいて、もっとも脆弱な箇所といえます。&lt;/p&gt;

&lt;h2 id=&#34;target-2-ビルドステージ:eed224310d4514a746715be452bdfbd0&#34;&gt;target-2 ビルドステージ&lt;/h2&gt;

&lt;p&gt;SBCL のビルドプロセスの最終ステージが、target-2 ビルドステージです。まず、パッケージを最終的な名前に変更し、sb! プレフィックスを、sb- プレフィックスとします。次に、SBCL に特殊化されたバージョンの Portable Common Loops (PCL) をコンパイルし、ロードします。最後に、そうしてできた新しいメモリイメージを、output/sbcl.core として保存します。&lt;/p&gt;

&lt;p&gt;これで、ビルドプロセスが完了しました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:eed224310d4514a746715be452bdfbd0&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このエントリでは、SBCL のビルドプロセスを順を追って説明しました。SBCL のアプローチにもメリット・デメリットはありますが、このような仕組みでセルフ・ブートストラッピングを実現しているというのは、興味深いところです。&lt;/p&gt;

&lt;h2 id=&#34;参考:eed224310d4514a746715be452bdfbd0&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.doc.gold.ac.uk/~mas01cr/papers/s32008/sbcl.pdf&#34;&gt;SBCL - a Sanely-Bootstrappable Common Lisp(PDF)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cl-reexport: symbol reexporting library for Common Lisp</title>
      <link>http://takagi.github.io/2014/05/20/cl-reexport/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0900</pubDate>
      
      <guid>http://takagi.github.io/2014/05/20/cl-reexport/</guid>
      <description>&lt;p&gt;CL-REEXPORT is a library to reexport symbols which are external symbols in other packages. It is valuable when virtually construct package hierarchy on Common Lisp standard&amp;rsquo;s flat package system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/takagi/cl-reexport&#34;&gt;cl-reexport: symbol reexporting library for Common Lisp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ASDF 3 has similar one-package-per-file facility. The structural difference between them is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Virtual hierarchy packages in this context have one system definition and several packages constituting a hierarchical structure.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ASDF 3&amp;rsquo;s one-package-per-file style has hierarchical system definitions and hierarchical packages, which are corresponding each other.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since ASDF 3&amp;rsquo;s one-package-per-file style has not been de facto standard yet, there may be some cases where cl-reexport is useful.&lt;/p&gt;

&lt;p&gt;Currently requesting to Quicklisp to register.&lt;/p&gt;

&lt;p&gt;I want your feedback.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>