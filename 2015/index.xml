<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2015s on Masayuki Takagi&#39;s Blog</title>
    <link>http://takagi.github.io/2015/</link>
    <description>Recent content in 2015s on Masayuki Takagi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Mar 2015 10:06:09 +0900</lastBuildDate>
    <atom:link href="http://takagi.github.io/2015/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to set up a Hugo blog on GitHub Pages</title>
      <link>http://takagi.github.io/2015/03/02/how-to-set-up/</link>
      <pubDate>Mon, 02 Mar 2015 10:06:09 +0900</pubDate>
      
      <guid>http://takagi.github.io/2015/03/02/how-to-set-up/</guid>
      <description>

&lt;p&gt;This post describes how to set up a blog with Hugo and to host it on GitHub Pages.&lt;/p&gt;

&lt;h2 id=&#34;hugo-on-github-pages:af3cead2406fc32e31f056f34083f33a&#34;&gt;Hugo on GitHub Pages&lt;/h2&gt;

&lt;p&gt;Hugo is a fast and modern static website engine. With Hugo, a new idea around making website creation becomes simple. GitHub Pages is website hosting directly from GitHub repositories. Just edit, push and changes are live.&lt;/p&gt;

&lt;p&gt;Following shows how to set up a blog with Hugo and to host it on GitHub Pages.&lt;/p&gt;

&lt;h2 id=&#34;making-two-repositories:af3cead2406fc32e31f056f34083f33a&#34;&gt;Making two repositories&lt;/h2&gt;

&lt;p&gt;First, make two repositories. One is for Hugo contents and the other is for blog hosted on GitHub Pages. Here I make these repositories for the following names and descriptions on my GitHub account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blog-hugo: Hugo contents for my blog.&lt;/li&gt;
&lt;li&gt;takagi.github.io: For my blog hosted on GitHub Pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The name &lt;code&gt;takagi.github.io&lt;/code&gt; is on GitHub Pages naming rule.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-a-blog-with-hugo:af3cead2406fc32e31f056f34083f33a&#34;&gt;Setting up a blog with Hugo&lt;/h2&gt;

&lt;p&gt;Second, create a new site for my blog with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site ~/Desktop/blog
$ cd ~/Desktop/blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After creating it, edit its configuration file &lt;code&gt;config.toml&lt;/code&gt;. Change the blog&amp;rsquo;s base url and title, add its author.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://takagi.github.io/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;Masayuki Takagi&#39;s Blog&amp;quot;
[params]
  author = &amp;quot;Masayuki Takagi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download a themes in its &lt;code&gt;theme&lt;/code&gt; directory. I choose liquorice theme. With the theme, I apply some CSS modification for my preference.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/eliasson/liquorice ~/themes/liquorice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For generating the site&amp;rsquo;s static HTML files, at least one content page is required. So create a content page with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new file is now created in &lt;code&gt;content/&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-03-02T09:25:07+09:00&amp;quot;
draft = true
title = &amp;quot;about&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Place some content in Markdown format below the &lt;code&gt;+++&lt;/code&gt; in this file. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A headline

Some Content
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapping-the-github-pages-repository:af3cead2406fc32e31f056f34083f33a&#34;&gt;Mapping the GitHub Pages repository&lt;/h2&gt;

&lt;p&gt;For deploying the static HTML files that will be generated in &lt;code&gt;public&lt;/code&gt; on &lt;code&gt;takagi.github.io&lt;/code&gt; repository, map the repository to &lt;code&gt;public&lt;/code&gt; as a git sub module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
$ git submodule add git@github.com:takagi/takagi.github.io.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generating-to-deploy:af3cead2406fc32e31f056f34083f33a&#34;&gt;Generating to deploy&lt;/h2&gt;

&lt;p&gt;With the following shell script, generate and deploy the blog on GitHub Pages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo --theme=liquorice

# Go To Public folder
cd public

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date +\&amp;quot;%Y-%m-%dT%H:%M:%S %Z\&amp;quot;`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;see-also:af3cead2406fc32e31f056f34083f33a&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages - Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PIC: A native compiler for 8-bit PIC micro controllers</title>
      <link>http://takagi.github.io/2015/03/01/pic/</link>
      <pubDate>Sun, 01 Mar 2015 15:48:15 +0900</pubDate>
      
      <guid>http://takagi.github.io/2015/03/01/pic/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/takagi/pic&#34;&gt;PIC&lt;/a&gt; is a native compiler for 8-bit PIC micro controllers written in Common Lisp. The host language is a pretty small subset of ML-like language and the target language is 8-bit PIC micro controller assembly. Common Lisp is the compiler language.&lt;/p&gt;

&lt;h2 id=&#34;usage:113ac366824a31a54089fe54144b2e89&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Following is an example of LED blinking with PIC12F683 micro controller. &lt;code&gt;init&lt;/code&gt; function is one of the compiler&amp;rsquo;s special functions, where the micro controller&amp;rsquo;s SFR(Special Function Registers) are initialized. Following &lt;code&gt;main&lt;/code&gt; function is also the compiler&amp;rsquo;s special function and program&amp;rsquo;s main routine is executed here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mdelay1&lt;/code&gt; function and &lt;code&gt;mdelay&lt;/code&gt; macro are for delaying. Note that since 8-bit PIC handles only 8-bit unsigned integers, nested loops are needed for delaying more than 255 msec (950 msec here). &lt;code&gt;progn&lt;/code&gt; and &lt;code&gt;loop&lt;/code&gt; are predefined macros for the compiler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defpic init ()
  (progn
    (setreg :gpio #x0)                  ; clear GP0-5
    (setreg :cmcon0 #x07)               ; disable comparator
    (setbank1)                          ; switch to bank 1
    (setreg :trisio #x08)               ; only GP3 is outputinputmode
    (setreg :ansel #x00)                ; disable analog IO
    (setreg :ioc #x00)                  ; disable interruption
    (setbank0)                          ; switch to bank 0
    (setreg :intcon #x00)))             ; disable interruption

(defpic main ()
  (progn
    (setreg :gpio #x20)                 ; set GP5 to high
    (mdelay 50)                         ; delay for 50 msec
    (setreg :gpio #x00)                 ; set GP5 to low
    (mdelay 950)                        ; delay for 950 msec
    (main)))                            ; repeat

(defpic mdelay1 ()
  (loop 90                              ; 90 is a magic number to delay
    0))                                 ;  for 1 msec

(defpicmacro mdelay (n)
  (unless (&amp;lt;= 0 n 65535)
    (error &amp;quot;The value ~S is invalid.&amp;quot; n))
  (multiple-value-bind (q r) (truncate n 256)
    (if (= q 0)
        `(loop ,r (mdelay1))
        `(loop ,q (loop ,r (mdelay1))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;code&gt;pic-compile&lt;/code&gt; function compiles and outputs the complete assembly for the PIC functions to standard output. The output assembly is expected to be assembled with Microchip&amp;rsquo;s MPASM assembler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PIC&amp;gt; (pic-compile)
    INCLUDE&amp;quot;p12f683.inc&amp;quot;
    list p=12f683

    __CONFIG _CP_OFF &amp;amp; _CPD_OFF &amp;amp; _WDT_OFF &amp;amp; _BOD_ON &amp;amp; _IESO_OFF&amp;amp; _PWRTE_ON &amp;amp; _INTOSCIO &amp;amp; _MCLRE_OFF

    CBLOCK  020h
    L0,L1,L2,L3,L4,L5,L6,L7 ; local registers
    I0,I1,I2,I3,I4,I5,I6,I7 ; input registers
    SP,STMP,STK             ; stack registers
    ENDC

    ORG 0
    GOTO    MAIN
    ...
    END
; No value
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;github-repository:113ac366824a31a54089fe54144b2e89&#34;&gt;GitHub repository&lt;/h2&gt;

&lt;p&gt;The GitHub repository is &lt;a href=&#34;https://github.com/takagi/pic&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>